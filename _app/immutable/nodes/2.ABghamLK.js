import{a as x,t as k}from"../chunks/disclose-version.CT4FqHsS.js";import{c as e,s as i,r as t,y as d}from"../chunks/runtime.BF4ddQLO.js";import{s}from"../chunks/attributes.Dk3bRcNo.js";import{b as m}from"../chunks/paths.lKtwmFXJ.js";import{F as L}from"../chunks/FoodExample.DCbU8dDU.js";import"../chunks/DataTable.BcTSWsPR.js";const T=""+new URL("../assets/example.DTv2tH3v.gif",import.meta.url).href,F=""+new URL("../assets/spotifySearchImage.DwjxwRHI.jpg",import.meta.url).href;var S=k(`<article class="prose-gray prose-base text-white"><div class="border-b border-white mb-10"><h1>FiTL (Filter Table Language)</h1> <h3>A simple language for filtering tables, because sometimes search algorithms just suck.</h3> <img alt="Example Query"></div> <p>Designed in mind for developers to wrap their search/filter box in a function and implement a
		universal table filtering language into their application, FiTL allows end users to easily
		filter down a singular table with column specific parameters. This leaves the overall guessing
		when it comes to what search algorithms will include/exclude down to a minimum.</p> <p>Real world examples include:</p> <ul class="space-y-1 list-outside list-disc"><li>Music Playlists (IE: Spotify Liked songs or an already made playlist)</li> <li>Search Page on Product pages (whether in blank search page or just filtering down search
			results)</li> <li>Movie/Video search results (Netflix/Hulu/IMDB searching/filtering)</li></ul> <ul class="list-inside border-b border-white pb-5"><li><h3>Learn more about how to write queries <a class="inline-flex items-center font-medium text-blue-600 dark:text-blue-500 hover:underline">How to Write Queries <svg class="w-4 h-4 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"></path></svg></a></h3></li> <li><h3>Check out an interactive example with example queries on <a class="inline-flex items-center font-medium text-blue-600 dark:text-blue-500 hover:underline">Playlist filter <svg class="w-4 h-4 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"></path></svg></a></h3></li> <li><h3>Written for Rust and JavaScript <a href="https://github.com/Slad3/FilterTableQueryLanguage" class="inline-flex items-center font-medium text-blue-600 dark:text-blue-500 hover:underline">Check out the source on GitHub <svg class="w-4 h-4 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"></path></svg></a></h3></li></ul> <div><h2>Advantages Over a General Search Algorithm</h2> <p>Why develop and/or learn an entire language just to do a more specific search?</p> <p>In my experience with typical applications (especially ones on the web), search works ever so
			slightly differently on each site. While the inconsistency is usually the biggest problem, the
			leeway when it comes to searching/filtering down a table can get frustrating if not confusing.
			While search acceptance is based on the use case of the application, underdeveloped
			applications (IE old product pages) may provide a search that is too strict and will not catch
			many obvious cases.</p> <p>Many modern applications (Spotify...) however may provide a search that either catches not
			only too many cases, or also catches strange cases where you are left wondering how it got
			that result from that search query. For example, why am I getting "the Way You Make Me Feel"
			by Michael Jackson and "How Do I Make You Love Me" by The Weeknd from the query: <b>"you the make"</b>? "the" is not even in the title "How Do I Make You Love Me"?</p> <img alt="Spotify's Odd Filtering Algorithm"> <p>The Simple answer is that it doesn't get just search for exact (or close matches) in song
			titles, rather it super fuzzy searches within all fields. An algorithm that works for the most
			part most of the time, but is very difficult to get specific, especially when I just want to
			quickly make a temp playlist of all my liked songs from a specific artist right before I hit
			the road.</p> <p>-- Spotify Rant Over --</p> <p>This is not something specifically directed at Spotify as many other modern services (YouTube,
			Reddit, Genius.com, etc, all share similar problems), Spotify is just where I filter tables
			data the most.</p> <p>So how does FiTL fix that?</p> <ol class=" space-y-1 list-disc list-outside"><li>FiTL allows the same kind of quick fuzzy filtering, but also allows for more specific
				filtering</li> <li>FiTL's syntax will stay the same across applications (granted they implement the library),
				leaving less room for guessing and unexpected behavior for searches and filtering</li> <li>Compared to writing your own filtering algorithm, FiTL is more efficient to implement and
				more efficient to run, since the library is either compiled into raw binary, or into web
				assembly keeping it lightweight and responsive</li> <li>If all else, FiTL can run along side your own search/filtering algorithm by allowing users
				to further filter down search results</li></ol></div> <div><h2>Why not just use SQL? (or a modified version of sql)</h2> <ul class=" space-y-1 list-disc list-outside"><li>FiTL is designed to be easier to type in a simple text box, especially on mobile devices</li> <li>SQL is easy enough to learn, but FiTL is made to be easy enough for people who touch grass</li> <li>SQL allows for table joining while FiTl is limited to singular table interacitons</li> <li>In general FiTL is meant for quickly filtering an existing table for end user use while SQL
				is meant for more reusable structured queries. Although neither is contrained to previously
				said purposes.</li></ul></div> <div class="py-5 mt-5 border-t border-white" id="foodExample"><h1>Interactive Example</h1> <p>Here's an interactive example with a table of food. Feel free to try out any of the example
			queries below or to write your own queries.</p> <!></div></article>`);function I(f){var a=S(),r=e(a),g=i(e(r),4);s(g,"src",T),t(r);var o=i(r,8),l=e(o),h=e(l),w=i(e(h));s(w,"href",`${m??""}/queries`),t(h),t(l);var c=i(l,2),u=e(c),y=i(e(u));s(y,"href",`${m??""}/playlist`),t(u),t(c),d(2),t(o);var n=i(o,2),b=i(e(n),8);s(b,"src",F),d(10),t(n);var p=i(n,4),v=i(e(p),4);L(v,{}),t(p),t(a),x(f,a)}export{I as component};
