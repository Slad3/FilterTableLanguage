import{a as e,t as l}from"../chunks/disclose-version.H0UT25UQ.js";import"../chunks/legacy.MLjFxmTp.js";var a=l(`<article class="prose-gray prose-base text-white svelte-12klx68"><h1 class="svelte-12klx68">Writing Queries</h1> <h2 class="svelte-12klx68">Simple Queries</h2> <p>Base form of a query can be described as:</p> <code class="svelte-12klx68">*column* *operator* *value*</code> <p>For example</p> <code class="svelte-12klx68">artist = JDilla</code> <p>Which filters through all the rows where the "artist" is equal to "JDilla"</p> <h2 class="svelte-12klx68">Get Complex With It</h2> <p>You can add multiple queries together with either a "&" (and) or an "|" (or) symble</p> <code class="svelte-12klx68">artist =: pac | artist = Makaveli</code> <p>Returns a table where the artist either has "pac" in the string or is equal to "Makaveli"</p> <h1 class="svelte-12klx68">Symbol Table</h1> <table class="svelte-12klx68"><thead><tr><th class="svelte-12klx68">Word</th><th class="svelte-12klx68">Symbol</th><th class="svelte-12klx68">Description</th></tr></thead><tbody><tr><td class="svelte-12klx68">not</td><td class="svelte-12klx68">!T</td><td class="svelte-12klx68">Negates Operation</td></tr><tr><td class="svelte-12klx68">is / equals</td><td class="svelte-12klx68">=</td><td class="svelte-12klx68">Exact match</td></tr><tr><td class="svelte-12klx68">contains</td><td class="svelte-12klx68">=:</td><td class="svelte-12klx68">Left contains right (Nickolas Picklous =: Nick)</td></tr><tr><td class="svelte-12klx68">isin</td><td class="svelte-12klx68">:=</td><td class="svelte-12klx68">Right contains left (Nick := Nickolas Picklous)</td></tr><tr><td class="svelte-12klx68">lessthan</td><td class="svelte-12klx68">&lt;</td><td class="svelte-12klx68">"Less than" comparison of numbers or characters based on ASCII value of characters</td></tr><tr><td class="svelte-12klx68">morethan</td><td class="svelte-12klx68">&gt;</td><td class="svelte-12klx68">"Greater than" comparison of numbers or characters based on ASCII value of characters</td></tr><tr><td class="svelte-12klx68">lessthanequals</td><td class="svelte-12klx68">&lt;=</td><td class="svelte-12klx68">"Less than or equals" comparison of numbers or characters based on ASCII value of
					characters</td></tr><tr><td class="svelte-12klx68">morethanequals</td><td class="svelte-12klx68">&gt;=</td><td class="svelte-12klx68">"Greater than or equals" comparison of numbers or characters based on ASCII value of
					characters</td></tr><tr><td class="svelte-12klx68">or</td><td class="svelte-12klx68">|</td><td class="svelte-12klx68">Or boolean operation</td></tr><tr><td class="svelte-12klx68">and</td><td class="svelte-12klx68">&amp;</td><td class="svelte-12klx68">And boolean operation</td></tr><tr><td class="svelte-12klx68"><em>Parenthesis</em></td><td class="svelte-12klx68">()</td><td class="svelte-12klx68">Prioritizes statements inside parenthesis</td></tr><tr><td class="svelte-12klx68"><em>NA</em></td><td class="svelte-12klx68">"&lt;value&gt;"</td><td class="svelte-12klx68">Combines multiple words into single string. Necessary for multi-worded tokens, optional
					for single-worded tokens</td></tr><tr><td class="svelte-12klx68"><em>NA</em></td><td class="svelte-12klx68">^T</td><td class="svelte-12klx68">Makes statement case-sensitive; queries are case-insensitive by default</td></tr></tbody></table></article>`);function r(t){var s=a();e(t,s)}function d(t){r(t)}export{d as component};
